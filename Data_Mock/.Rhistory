zero.plot <- data.frame(t(as.numeric(ilrInv(c(0, 0)))))
colnames(zero.plot) <- c("v1", "v2", "v3")
cbPalette <- c(
"#E69F00",  # orange
"#56B4E9",  # sky blue
"#009E73",  # green
"#F0E442",  # yellow
# blue
"#D55E00",  # reddish orange
"#CC79A7"   # pink
)
cbPalette <- c(
"#2166AC","white","#B2182B"
)
ggtern(data = df_all, aes(v1, v2, v3, color = val)) +
geom_point() +
geom_point(data = bias.plot, aes(v1, v2, v3),
shape = 21, fill = "#D55E00", color = "black", size = 5.5, stroke = 1.4) +  # orange
geom_point(data = zero.plot, aes(v1, v2, v3),
shape = 21, fill = "#009E73", color = "black", size = 4, stroke = 1.4) +    # green
scale_color_gradientn(
colors = cbPalette,  # should be ordered like: low -> mid -> high (e.g., blue, white, red)
values = scales::rescale(c(min(df_all$val), 0, max(df_all$val))),  # force zero to midpoint
name = "Simpson bias",
limits = c(min(df_all$val), max(df_all$val))
) +
labs(
T = "TAXA 1",
L = "TAXA 2",
R = "TAXA 3"
) +
theme_bw(base_size = 15) +
theme(
plot.margin = unit(c(-1, -2, -1, -2), "cm"),
tern.axis.title.T = element_text(margin = margin(b = 50), size = 18),
tern.axis.title.L = element_text(margin = margin(t = 50),size = 18),
tern.axis.title.R = element_text(margin = margin(t = 50),size = 18),
tern.axis.text = element_text(size = 18),
legend.text = element_text(size = 19),
legend.title = element_text(size = 20)
)
bias <- c(1,0.85,1)
bias <- as.numeric(miniclo(bias))
bias <- ilr(bias)
n_grid <- 70  # larger n = finer grid
x.prop <- uniform_simplex_grid(n_grid)
epsilon <- 1e-8
x.prop <- x.prop + epsilon
x.prop <- x.prop / rowSums(x.prop)
x<- ilr(x.prop)
x <- as(x, "matrix")
y <- x
for (i in 1:nrow(x)) {
y[i,] <- x[i,]+35*bias
}
y.prop <- driver::ilrInv(y)
simpson.x <- simpsons_index(x.prop)
simpson.y <- simpsons_index(y.prop)
delta_simpson <- simpson.y - simpson.x
# Create data frame for plotting
df_all <- data.frame(
v1 = x.prop[, 1],
v2 = x.prop[, 2],
v3 = x.prop[, 3],
val = delta_simpson
)
# Reference points
bias.plot <- t(data.frame(as.numeric(ilrInv(bias))))
colnames(bias.plot) <- c("v1", "v2", "v3")
zero.plot <- data.frame(t(as.numeric(ilrInv(c(0, 0)))))
colnames(zero.plot) <- c("v1", "v2", "v3")
cbPalette <- c(
"#E69F00",  # orange
"#56B4E9",  # sky blue
"#009E73",  # green
"#F0E442",  # yellow
# blue
"#D55E00",  # reddish orange
"#CC79A7"   # pink
)
cbPalette <- c(
"#2166AC","white","#B2182B"
)
ggtern(data = df_all, aes(v1, v2, v3, color = val)) +
geom_point() +
geom_point(data = bias.plot, aes(v1, v2, v3),
shape = 21, fill = "#D55E00", color = "black", size = 5.5, stroke = 1.4) +  # orange
geom_point(data = zero.plot, aes(v1, v2, v3),
shape = 21, fill = "#009E73", color = "black", size = 4, stroke = 1.4) +    # green
scale_color_gradientn(
colors = cbPalette,  # should be ordered like: low -> mid -> high (e.g., blue, white, red)
values = scales::rescale(c(min(df_all$val), 0, max(df_all$val))),  # force zero to midpoint
name = "Simpson bias",
limits = c(min(df_all$val), max(df_all$val))
) +
labs(
T = "TAXA 1",
L = "TAXA 2",
R = "TAXA 3"
) +
theme_bw(base_size = 15) +
theme(
plot.margin = unit(c(-1, -2, -1, -2), "cm"),
tern.axis.title.T = element_text(margin = margin(b = 50), size = 18),
tern.axis.title.L = element_text(margin = margin(t = 50),size = 18),
tern.axis.title.R = element_text(margin = margin(t = 50),size = 18),
tern.axis.text = element_text(size = 18),
legend.text = element_text(size = 19),
legend.title = element_text(size = 20)
)
cbPalette <- c(
"#2166AC","white", "white","#B2182B"
)
ggtern(data = df_all, aes(v1, v2, v3, color = val)) +
geom_point() +
geom_point(data = bias.plot, aes(v1, v2, v3),
shape = 21, fill = "#D55E00", color = "black", size = 5.5, stroke = 1.4) +  # orange
geom_point(data = zero.plot, aes(v1, v2, v3),
shape = 21, fill = "#009E73", color = "black", size = 4, stroke = 1.4) +    # green
scale_color_gradientn(
colors = cbPalette,  # should be ordered like: low -> mid -> high (e.g., blue, white, red)
values = scales::rescale(c(min(df_all$val), 0, max(df_all$val))),  # force zero to midpoint
name = "Simpson bias",
limits = c(min(df_all$val), max(df_all$val))
) +
labs(
T = "TAXA 1",
L = "TAXA 2",
R = "TAXA 3"
) +
theme_bw(base_size = 15) +
theme(
plot.margin = unit(c(-1, -2, -1, -2), "cm"),
tern.axis.title.T = element_text(margin = margin(b = 50), size = 18),
tern.axis.title.L = element_text(margin = margin(t = 50),size = 18),
tern.axis.title.R = element_text(margin = margin(t = 50),size = 18),
tern.axis.text = element_text(size = 18),
legend.text = element_text(size = 19),
legend.title = element_text(size = 20)
)
library(tidyverse)
library(ggtern)
library(driver) # jsilve24/driver
aitchison_norm <- function(comp) {
sqrt(rowSums(comp^2))
}
bias <- c(1,0.85,1)
bias <- as.numeric(miniclo(bias))
bias <- ilr(bias)
n_grid <- 70  # larger n = finer grid
x.prop <- uniform_simplex_grid(n_grid)
epsilon <- 1e-8
x.prop <- x.prop + epsilon
x.prop <- x.prop / rowSums(x.prop)
x<- ilr(x.prop)
x <- as(x, "matrix")
y <- x
for (i in 1:nrow(x)) {
y[i,] <- x[i,]+35*bias
}
y.prop <- driver::ilrInv(y)
aitchison.x <- aitchison_norm(x)
aitchison.y <- aitchison_norm(y)
delta_aitchison <- aitchison.y - aitchison.x
# Create data frame for plotting
df_all <- data.frame(
v1 = x.prop[, 1],
v2 = x.prop[, 2],
v3 = x.prop[, 3],
val = delta_aitchison
)
# Identify points near zero change
df_near_zero <- df_all %>% filter(abs(val) < 0.05)
# Reference points
bias.plot <- t(data.frame(as.numeric(ilrInv(bias))))
colnames(bias.plot) <- c("v1", "v2", "v3")
zero.plot <- data.frame(t(as.numeric(ilrInv(c(0, 0)))))
colnames(zero.plot) <- c("v1", "v2", "v3")
cbPalette <- c(
"#E69F00",  # orange
"#56B4E9",  # sky blue
"#009E73",  # green
"#D55E00",
"#F0E442",  # yellow
# blue
# reddish orange
"#CC79A7"   # pink
)
cbPalette <- c(
"#2166AC", "white","white","#B2182B"
)
ggtern(data = df_all, aes(v1, v2, v3, color = val)) +
geom_point() +
geom_point(data = bias.plot, aes(v1, v2, v3),
shape = 21, fill = "#D55E00", color = "black", size = 5.5, stroke = 1.4) +  # orange
geom_point(data = zero.plot, aes(v1, v2, v3),
shape = 21, fill = "#009E73", color = "black", size = 4, stroke = 1.4) +    # green
scale_color_gradientn(
colors = cbPalette,  # should be ordered like: low -> mid -> high (e.g., blue, white, red)
values = scales::rescale(c(min(df_all$val), 0, max(df_all$val))),  # force zero to midpoint
name = "Aitchison bias",
limits = c(min(df_all$val), max(df_all$val))
)+
labs(
T = "TAXA 1",
L = "TAXA 2",
R = "TAXA 3"
) +
theme_bw(base_size = 15) +
theme(
plot.margin = unit(c(-1, -2, -1, -2), "cm"),
tern.axis.title.T = element_text(margin = margin(b = 50), size = 18),
tern.axis.title.L = element_text(margin = margin(t = 50),size = 18),
tern.axis.title.R = element_text(margin = margin(t = 50),size = 18),
tern.axis.text = element_text(size = 18),
legend.text = element_text(size = 19),
legend.title = element_text(size = 20)
)
bias <- c(1,1.15,1)
bias <- as.numeric(miniclo(bias))
bias <- ilr(bias)
n_grid <- 70  # larger n = finer grid
x.prop <- uniform_simplex_grid(n_grid)
epsilon <- 1e-8
x.prop <- x.prop + epsilon
x.prop <- x.prop / rowSums(x.prop)
x<- ilr(x.prop)
x <- as(x, "matrix")
y <- x
for (i in 1:nrow(x)) {
y[i,] <- x[i,]+35*bias
}
y.prop <- driver::ilrInv(y)
aitchison.x <- aitchison_norm(x)
aitchison.y <- aitchison_norm(y)
delta_aitchison <- aitchison.y - aitchison.x
# Create data frame for plotting
df_all <- data.frame(
v1 = x.prop[, 1],
v2 = x.prop[, 2],
v3 = x.prop[, 3],
val = delta_aitchison
)
# Identify points near zero change
df_near_zero <- df_all %>% filter(abs(val) < 0.05)
# Reference points
bias.plot <- t(data.frame(as.numeric(ilrInv(bias))))
colnames(bias.plot) <- c("v1", "v2", "v3")
zero.plot <- data.frame(t(as.numeric(ilrInv(c(0, 0)))))
colnames(zero.plot) <- c("v1", "v2", "v3")
cbPalette <- c(
"#E69F00",  # orange
"#56B4E9",  # sky blue
"#009E73",  # green
"#D55E00",
"#F0E442",  # yellow
# blue
# reddish orange
"#CC79A7"   # pink
)
cbPalette <- c(
"#2166AC", "white","white","#B2182B"
)
ggtern(data = df_all, aes(v1, v2, v3, color = val)) +
geom_point() +
geom_point(data = bias.plot, aes(v1, v2, v3),
shape = 21, fill = "#D55E00", color = "black", size = 5.5, stroke = 1.4) +  # orange
geom_point(data = zero.plot, aes(v1, v2, v3),
shape = 21, fill = "#009E73", color = "black", size = 4, stroke = 1.4) +    # green
scale_color_gradientn(
colors = cbPalette,  # should be ordered like: low -> mid -> high (e.g., blue, white, red)
values = scales::rescale(c(min(df_all$val), 0, max(df_all$val))),  # force zero to midpoint
name = "Aitchison bias",
limits = c(min(df_all$val), max(df_all$val))
)+
labs(
T = "TAXA 1",
L = "TAXA 2",
R = "TAXA 3"
) +
theme_bw(base_size = 15) +
theme(
plot.margin = unit(c(-1, -2, -1, -2), "cm"),
tern.axis.title.T = element_text(margin = margin(b = 50), size = 18),
tern.axis.title.L = element_text(margin = margin(t = 50),size = 18),
tern.axis.title.R = element_text(margin = margin(t = 50),size = 18),
tern.axis.text = element_text(size = 18),
legend.text = element_text(size = 19),
legend.title = element_text(size = 20)
)
library(tidyverse)
library(driver) # devtools::install_github("jsilve24/driver")
library(fido) # devtools::install_github("jsilve24/stray")
library(phyloseq)
library(NVC) # devtools::install_github("jsilve24/NVC")
library(DECIPHER) # for computing sequence similarity
library(tidybayes)
library(ggforce)
library(ggrepel)
library(Biostrings)
set.seed(18845)
setwd("~/Data_Gut")
library(Biostrings)
set.seed(18845)
ps <- readRDS("phyloseq.rds")
path.addedmeta <- "2017.08.14MappingFile_addedmetadata.txt"
sample_data(ps) <- phyloseq::import_qiime_sample_data(path.addedmeta)
total.reads <- sum(sample_sums(ps))
ps <- prune_samples(sample_sums(ps)>5000, ps)
sum(sample_sums(ps))/total.reads
ps <- tax_glom(ps, "Genus")
tmp <- taxa_names(ps)
d <- as(otu_table(ps), "matrix")
d <- apply(d, 2, function(x) sum(x > 3) > 0.30*length(x))
tmp <- tmp[!d]
ps <- merge_taxa(ps, tmp, 1)
other <- taxa_names(ps)[taxa_names(ps) %in% tmp]
tmp <- taxa_names(ps)
tmp[tmp==other] <- "other"
taxa_names(ps) <- tmp
rm(tmp, d, other)
otu_table(ps)
taxa_names(ps)
# Prune samples where BiasPCRMachine is not equal to 3
ps <- prune_samples(sample_data(ps)$BiasPCRMachine != 3, ps)
# Convert BiasDonorName to a factor with specified levels
sample_data(ps)$BiasDonorName <- factor(sample_data(ps)$BiasDonorName,
levels = c("16S8921", "908", "Ai96", "J1122526T"))
# Prepare Y and X matrices
Y <- as(t(otu_table(ps)), "matrix")
X <- t(as.matrix(model.matrix(~BiasPCRCycleNum + factor(BiasPCRMachine),
as(sample_data(ps), "data.frame"))))
# One-hot encode donor names based on the factor levels
X.donor <- onehot(sample_data(ps)$BiasDonorName)
colnames(X.donor) <- c("16S8921", "908", "Ai96", "J1122526T")
X <- rbind(t(X.donor), X[2:nrow(X),])
rm(X.donor)
# Clean Names for PCR Machines
rownames(X)[6:8] <- c("I(Machine2)", "I(Machine4)", "I(Machine5)")
# form priors
A <- create_alr_base(ntaxa(ps), ntaxa(ps))
Xi <- (t(A) %*% diag(ntaxa(ps)) %*% A)/2 # divide by 2 to scale to unit diagonal
Gamma <- diag(c(15, 15, 15, 15, 1, 1, 1, 1))
upsilon <- ntaxa(ps)+3
Theta <- matrix(0, ntaxa(ps)-1,ncol(Gamma))
print(dim(Y))
print(head(Y[, as.numeric(sample_data(ps)$BiasDonorName) == i]))
# fit model
fit <- pibble(Y, X, upsilon, Theta, Gamma, Xi)
p <- ppc(fit)
fit <- to_clr(fit)
fit <- fido:::name.pibblefit(fit)
coord.names <- dimnames(fit$Eta)[[1]]
dimnames(fit$Lambda)[2]
d <- (Y+0.65) %>%
clr_array(1) %>%
fido::gather_array(val, coord, sample) %>% # Specify fido::gather_array
mutate(pcr_cycle = fit$X[5,][sample],
sample_name = sample_names(ps)[sample],
PCRMachine = factor(sample_data(ps)$BiasPCRMachine[sample]),
Donor = sample_data(ps)$BiasDonorName[sample],
mean=val) %>%
mutate(coord = coord.names[coord])
fit<- to_proportions(fit)
setwd("~/")
setwd("~/Github/Data_Mock")
# Picogreen
pg <- "2020-03-05_PCRBias_qPCR_Picogreen.xlsx"
pg <- readxl::read_xlsx(pg)
# Dilution Ratios
dr <- "DNA dilutions.xlsx"
dr <- readxl::read_xlsx(dr)
dr[,2]/300*pg$PicogreenDNAConc
# Read in Mock community ratios
tmp <- "Mock Communities.xlsx"
mock_ratios <- readxl::read_xlsx(tmp, skip=1)
mock_ratios <- mock_ratios[-11,]
mock_ratios <- mock_ratios[,-1]
mock_ratios <- driver::miniclo_array(as.matrix(mock_ratios), parts=1)
colnames(mock_ratios) <- paste0("Mock_", 1:10)
rownames(mock_ratios) <- c("B.subtilis", "B.longum",
"C.hathewayi", "C.innocuum",
"C.aerofaciens", "E.faecalis",
"L.oris", "L.ruminis",
"R.intestinalis", "S.gallolyticus")
rm(tmp)
# read in phyloseq
ps <- readRDS("phyloseq.rds")
# Filter low abundance samples
total.reads <- sum(sample_sums(ps))
ps <- prune_samples(sample_sums(ps)>1000, ps)
sum(sample_sums(ps))/total.reads
# read in seq clusters -- created by sequencing isolates individually
load("seq_clusters.RData")
# Map seq to isolate clusters
seq_dictionary <- choices_seq
seq_dictionary[["S.aureus"]] <- NULL
for (n in names(seq_dictionary)) {
names(seq_dictionary[[n]]) <- rep(n, length(seq_dictionary[[n]]))
}
seq_dict <- seq_dictionary[[1]]
for (n in 2:length(seq_dictionary)){
seq_dict <- c(seq_dict, seq_dictionary[[n]])
}
rm(seq_dictionary)
# Start Matching
combined_seq <- c(seq_dict, refseq(ps))
seq_dist <- stringDist(combined_seq, method = "levenshtein")
n1 <- length(seq_dict)
n2 <- length(refseq(ps))
seq_dist <- as.matrix(seq_dist)
seq_dist <- seq_dist[1:n1, (n1+1):(n1+n2)]
# Match based on minimum distance
seq_dist_min <- seq_dist %>%
array_branch(2) %>%
map(which.min)
seq_mapping <- data.frame(seq=names(seq_dist_min),
name = unlist(map(seq_dist_min, names)),
dist = unlist(seq_dist_min),
tax_sum = taxa_sums(ps)[names(seq_dist_min)])
# Explore mapping
seq_mapping %>%
group_by(name) %>%
summarize(sum_count = sum(tax_sum),
mean_dist = mean(dist))
plot(density(seq_mapping$dist))
# Just double check results...
hclust(stringDist(combined_seq, method = "levenshtein")) %>% plot()
# seq_17-seq_21 seem off in their own land while everything else falls nicely
# within a given cluster
# Blasting seq_18 and seq_19 give some weird bacillus species that I have never
# heard of... either way they represent very few counts total I bet.
ts <- taxa_sums(ps)
100-sum(ts[ts>500])/sum(ts)*100
# Yup only dropping 0.003% of counts
rm(ts)
# drop seq_variants with fewer than 500 counts based on histogram of taxa_counts
# these seem to be observed very infrequently -- also correspond to taxa that are not similar
# to known isolates -- could be contamination
ps <- filter_taxa(ps, function(x) sum(x) > 500, TRUE)
seq_mapping <- filter(seq_mapping, seq %in% taxa_names(ps))
# Create new count table for modeling
Y <- as(t(otu_table(ps)),"matrix")
Y <- split(Y, seq_mapping$name) %>%
map(~matrix(.x, ncol=phyloseq::nsamples(ps)))
Y <- map(Y, colSums) %>%
do.call(rbind, .)
colnames(Y) <- sample_names(ps)
# Extract covariates from file names
sn <- colnames(Y)
d <- data.frame(sn = sn,
c1 = as.character(str_extract(sn, "^[:alpha:]*")),
c2 = as.numeric(str_extract(sn, "[:digit:]*(?=\\.)")),
c3 = as.numeric(str_extract(sn, "(?<=\\.)[:digit:]*$"))) %>%
mutate(sample_num = if_else(c1 == "cycle", "Calibration", paste0("Mock", c2)),
cycle_num = if_else(c1=="cycle", c2, 35),
machine = sample_data(ps)[sn,]$machine) %>%
mutate(machine = as.factor(machine))
# isolate to just calibration samples
calibL <- str_detect(colnames(Y), "^cycle")
Ycalib <- Y[,calibL]
Xcalib <- t(model.matrix(~ cycle_num + machine, data=d[calibL,]))
sigma2 <- seq(.5, 10, by=.5)
lml <- rep(NA, length(sigma2))
for (i in seq_along(sigma2)){
fit <- pibble(Y=Ycalib, X=Xcalib, Gamma = sigma2[i]*diag(nrow(Xcalib)))
lml[i] <- fit$logMarginalLikelihood
}
plot(sigma2, lml)
# pick sigma2=10 based on maximizing log-marginal likelihood
fit <- pibble(Y=Ycalib, X=Xcalib, Gamma = 10*diag(nrow(Xcalib)))
fit <- to_clr(fit)
LambdaX_focused <- predict(fit, newdata=cbind(c(1, 0, 0, 0, 0),
c(1, 35, 0, 0, 0)),
pars="LambdaX", use_names=FALSE)
bias <- clrInv_array(LambdaX_focused, 1)
bias <- bias[,2,]/bias[,1,]
bias <- log2(bias)
bias %>%
gather_array(val, coord, iter) %>%
mutate(val = abs(val)) %>%
group_by(iter) %>%
summarise(val = exp(mean(val))) %>%
ungroup() %>%
summarise_posterior(val)
bias <- bias %>%
gather_array(val, coord, iter) %>%
group_by(coord) %>%
summarise_posterior(val) %>%
ungroup() %>%
mutate(coord = names_categories(fit)[coord])
p <- bias %>%
mutate(sig = ifelse(sign(p2.5)==sign(p97.5), TRUE, FALSE)) %>%
arrange(mean) %>%
mutate(rank = 1:n()) %>%
mutate(coord = factor(coord, levels=coord[order(mean)])) %>%
ggplot(aes(x = coord, y=mean)) +
geom_hline(yintercept=0) +
geom_pointrange(aes(ymin=p2.5, ymax=p97.5, color=sig)) +
theme_minimal() +
scale_color_manual(values = c("grey", "black")) +
ylab(expression(log[2]~over(Proportion~~at~~Cycle~~35,Proportion~~at~~Cycle~~0))) +
theme(
axis.title.y = element_text(size = 17),
axis.text.y = element_text(size = 17),
axis.text.x = element_text(size = 17, angle = 90, vjust = 0.5, hjust = 1),
text = element_text(size = 11),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
legend.position = 'none'
)
p
